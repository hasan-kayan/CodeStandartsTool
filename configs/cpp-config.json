{
    "tools": {
        "clang-format": {
            "command": "clang-format",
            "arguments": "-i",
            "style": "file"
        },
        "cppcheck": {
            "command": "cppcheck",
            "arguments": "--enable=all --inconclusive --output-file=cppcheck_report.txt",
            "ignore": "vendor/*"
        },
        "filenamerules": {
            "cpp": {
                "pattern": "^[a-z][a-z0-9_]*$",
                "message": "C++ file names should be in snake_case."
            },
            "hpp": {
                "pattern": "^[a-z][a-z0-9_]*$",
                "message": "C++ header file names should be in snake_case."
            }
        },
        "cmake-format": {
            "command": "cmake-format",
            "arguments": "-i",
            "style": "file"
        },
        "variablenamerules": {
            "pattern": "^[a-z][a-z0-9_]*$",
            "message": "Variable names should be in snake_case."
        },
        "functionnamerules": {
            "pattern": "^[a-z][a-z0-9_]*$",
            "message": "Function names should be in snake_case."
        },
        "classnamerules": {
            "pattern": "^[A-Z][a-zA-Z0-9]*$",
            "message": "Class names should be in CamelCase."
        },
        "structnamerules": {
            "pattern": "^[A-Z][a-zA-Z0-9]*$",
            "message": "Struct names should be in CamelCase."
        },
        "enumnamerules": {
            "pattern": "^[A-Z][a-zA-Z0-9]*$",
            "message": "Enum names should be in CamelCase."
        },
        "enumvaluenerules": {
            "pattern": "^[A-Z][A-Z0-9_]*$",
            "message": "Enum values should be in SCREAMING_SNAKE_CASE."
        },
        "macrodefrules": {
            "pattern": "^[A-Z][A-Z0-9_]*$",
            "message": "Macro definitions should be in SCREAMING_SNAKE_CASE."
        },
        "includeguardrules": {
            "pattern": "^[A-Z][A-Z0-9_]*$",
            "message": "Include guards should be in SCREAMING_SNAKE_CASE."
        },
        "variableusagecheck": {
            "variableused": "true",
            "functionused": "true",
            "classused": "true",
            "structused": "true",
            "enumused": "true",
            "macrodefused": "true",
            "includeguardused": "true"
        }
    }
}